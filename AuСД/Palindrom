import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

class Main {
    public static void main(String[] args) {

        String inputFile = "input.txt";
        String outputFile = "output.txt";
        try {
            BufferedReader reader = new BufferedReader(new FileReader(inputFile));
            String input = reader.readLine();
            reader.close();

            if (input.length() > 7000) {
                return;
            }

            int n = input.length();
            int[][] dArr = new int[n][n];
            for (int i = 0; i < n; i++) {
                dArr[i][i] = 1;
            }

            for (int l1 = 2; l1 <= n; l1++) {
                for (int i = 0; i <= n - l1; i++) {
                    int j = i + l1 - 1;
                    if (input.charAt(i) == input.charAt(j)) {
                        dArr[i][j] = dArr[i + 1][j - 1] + 2;
                    } else {
                        dArr[i][j] = Math.max(dArr[i + 1][j], dArr[i][j - 1]);
                    }
                }
            }
            StringBuilder left = new StringBuilder();
            StringBuilder right = new StringBuilder();
            int i = 0, j = n - 1;

            while (i <= j) {
                if (input.charAt(i) == input.charAt(j)) {
                    left.append(input.charAt(i));
                    if (i != j) {
                        right.insert(0, input.charAt(j));
                    }
                    i++;
                    j--;
                } else if (dArr[i + 1][j] > dArr[i][j - 1]) {
                    i++;
                } else {
                    j--;
                }
            }
            String palindrom = left.toString() + right.toString();
            int length = palindrom.length();
            BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile));
            writer.write(String.valueOf(length));
            writer.newLine();
            writer.write(palindrom);
            writer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
